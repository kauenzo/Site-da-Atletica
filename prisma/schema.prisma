generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  cpf           String    @unique
  phone         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  
  // Relações
  createdLinks  Link[]    @relation("CreatedLinks")
  updatedLinks  Link[]    @relation("UpdatedLinks")
  
  // NextAuth
  accounts      Account[]
  sessions      Session[]
}

model Link {
  id            String      @id @default(cuid())
  label         String
  url           String
  slug          String      @unique
  isActive      Boolean     @default(true)
  clickCount    Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relações
  createdById   String
  createdBy     User        @relation("CreatedLinks", fields: [createdById], references: [id])
  updatedById   String?
  updatedBy     User?       @relation("UpdatedLinks", fields: [updatedById], references: [id])
  
  clicks        LinkClick[]
  
  @@index([slug])
  @@index([isActive])
}

model LinkClick {
  id          String   @id @default(cuid())
  linkId      String
  link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  clickedAt   DateTime @default(now())
  userAgent   String?
  referer     String?
  ipAddress   String?
  
  @@index([linkId])
  @@index([clickedAt])
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}